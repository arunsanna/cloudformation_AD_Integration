{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "win-web-stack-noELB v1.0.0",
  "Outputs": {},
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Application Name, Environment, Build Number and S3Bucket"
          },
          "Parameters": [
            "AppName",
            "Envname",
            "BuildNumber"
          ]
        },
        {
          "Label": {
            "default": "ASG Launch Configuration Details"
          },
          "Parameters": [
            "AmiId",
            "InstanceType",
            "AZs",
            "KeyName",
            "AppServerPort",
            "Creator",
            "AdminListString",
            "DomainJoinUsername",
            "VpcId",
            "DomainJoinPassword"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "AdminListString": {
      "Default": "",
      "Type": "String",
      "Description": "Space-separated list of groups or users to add as local admins, eg. ditech\\S1_Gap_Developers"
    },
    "AppName": {
      "Type": "String",
      "Default": "Five9-test",
      "Description": "Unique name of the application"
    },
    "DomainJoinUsername": {
      "Type": "String",
      "Default": "svc_aws_mc",
      "Description": "Account with rights to join computers to domain"
    },
    "AppServerPort": {
      "Description": "Port the App is listening on",
      "Type": "String",
      "Default": "80",
      "ConstraintDescription": "App Server port"
    },
    "Creator": {
      "Description": "Creator of the EC2 instance",
      "Type": "String"
    },
    "VpcId" : {
      "Description" : "VpcId to be launched in",
      "Type" : "String"
    },
    "DomainJoinPassword": {
      "Description": "Password for the account with rights to join computers to domain",
      "Type": "String",
      "NoEcho": "true"
    },
    "APPSVCAccountUsername": {
      "Type": "String",
      "Default": "svc_aws_mc",
      "Description": "Account for the SVC account under the app pool is running"
    },
    "APPSVCAccountPassword": {
      "Description": "Password for the SVC account under the app pool is running",
      "Type": "String",
      "NoEcho": "true"
    },
    "Envname": {
      "Type": "String",
      "Default": "tst",
      "AllowedValues": [
        "dev",
        "tst",
        "prd"
      ],
      "ConstraintDescription": "must be a valid environment type ( tst, prd).",
      "Description": "Environment Name"
    },
    "KeyName": {
      "Default": "WindowsEphemeralKey",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server"
    },
    "BuildNumber": {
      "Default": "NONE",
      "Type": "String",
      "Description": "Build Number"
    },
    "AZs": {
      "Default": "AC",
      "Type": "String",
      "AllowedValues": [
        "A",
        "C",
        "AC"
      ],
      "Description": "Which availability zone(s) should instances be in?"
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "43.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type.",
      "Default": "t2.small",
      "Type": "String"
    },
    "AmiId": {
      "Type": "String",
      "Default": "ami-aab2cec0",
      "Description": "AMI id for building the Ec2 instance"
    },

  },
  "Mappings": {
    "DNSServersByAZEnvname": {
      "us-east-1a": {
        "tst": "pmdc015.ditech.us",
        "dev": "pmdc015.ditech.us",
        "sbx": "",
        "stg": "pmdc017.ditech.us",
        "prd": "pmdc017.ditech.us"
      },
      "us-east-1c": {
        "tst": "pmdc014.ditech.us",
        "dev": "pmdc014.ditech.us",
        "sbx": "",
        "stg": "pmdc018.ditech.us",
        "prd": "pmdc018.ditech.us"
      }
    },
    "MapByEnvname": {
      "sbx": {
        "EnvTag": "ditech_SBX",
        "OpsInfoTag": "W|MON-FRI|0700-1900",
        "Bucket": "ditech-deployables-devtst",
        "Snap": "snap-cb30e5ab",
        "AppSg": [
          "sg-844705e0"
        ],
        "StarCert": "arn:aws:iam::017661502085:server-certificate/wildcard.ditech.us"
      },
      "stg": {
        "EnvTag": "ditech_STG",
        "OpsInfoTag": "W|MON-FRI|0700-1900",
        "StarCert": "arn:aws:iam::958398754603:server-certificate/wildcard.ditech.us",
        "AppSg": [
          "sg-9af5c3fc"
        ],
        "Bucket": "ditech-deployables-prdstg",
        "Snap": "snap-137de16e"
      },
      "tst": {
        "EnvTag": "ditech_TST",
        "OpsInfoTag": "W|*|*",
        "AppSg": [
          "sg-2185585b"
        ],
        "StarCert": "arn:aws:iam::017661502085:server-certificate/wildcard.ditech.us",
        "Snap": "snap-cb30e5ab",
        "Bucket": "ditech-deployables-devtst"
      },
      "prd": {
        "EnvTag": "ditech_PRD",
        "OpsInfoTag": "W|*|*",
        "Bucket": "ditech-deployables-prdstg",
        "Snap": "snap-137de16e",
        "AppSg": [
          "sg-ef0cde95"
        ],
        "StarCert": "arn:aws:iam::958398754603:server-certificate/wildcard.ditech.us"
      },
      "dev": {
        "EnvTag": "ditech_DEV",
        "OpsInfoTag": "W|MON-FRI|0700-1900",
        "AppSg": [
          "sg-c72292a1"
        ],
        "StarCert": "arn:aws:iam::017661502085:server-certificate/wildcard.ditech.us",
        "Snap": "snap-cb30e5ab",
        "Bucket": "ditech-deployables-devtst"
      }
    },
    "AppSubnetByAZEnvname": {
      "A": {
        "tst": [
          "subnet-7a744a51"
        ]
      },
      "C": {
        "tst": [
          "subnet-9edfd0c7"
        ]
      },
      "AC": {
        "tst": [
          "subnet-7a744a51",
          "subnet-9edfd0c7"
        ]
      }
    },
    "XAppSubnetByAZEnvname": {
      "A": {
        "tst": [
          "subnet-6dcfc046"
        ]
      },
      "C": {
        "tst": [
          "subnet-84bda0dd"
        ]
      },
      "AC": {
        "tst": [
          "subnet-6dcfc046",
          "subnet-84bda0dd"
        ]
      }
    },
    "AZnames": {
      "A": {
        "string": "us-east-1a",
        "list": [
          "us-east-1a"
        ]
      },
      "C": {
        "string": "us-east-1c",
        "list": [
          "us-east-1c"
        ]
      },
      "AC": {
        "string": "us-east-1a, us-east-1c",
        "list": [
          "us-east-1a",
          "us-east-1c"
        ]
      }
    }
  },
  "Conditions": {
    "EncryptEbs": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "prd",
            {
              "Ref": "Envname"
            }
          ]
        },
        {
          "Fn::Equals": [
            "stg",
            {
              "Ref": "Envname"
            }
          ]
        }
      ]
    }
  },
  "Resources": {
    "ELBSecGroup" :{
      "Type" : "AWS::ELB::SecurityGroups",
      "Version" : "2016-12-08",
      "Properties": {
        "GroupDescription" : "String",
        "SecurityGroupEgress" : [
         {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
         },
         {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
         }
      ],
        "SecurityGroupIngress" : [
         {
            "IpProtocol":"tcp",
            "FromPort":"80",
            "ToPort":"80",
            "CidrIp":"0.0.0.0/0"
         },
         {
            "IpProtocol":"tcp",
            "FromPort":"443",
            "ToPort":"443",
            "CidrIp":"0.0.0.0/0"
         }
      ],
        "Tags" : "",
        "VpcId" : [ {"Ref" : "VpcId" } ]
      }
    },
    "ELB" : {
       "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
       "Properties": {
         "listeners": [
           { "InstancePort" : "80",
             "InstanceProtocol" : "HTTP",
             "LoadBalancerPort" : "80",
             "Protocol" : "HTTP",
           },
           { "InstancePort" : "443",
             "InstanceProtocol" : "HTTPS",
             "LoadBalancerPort" : "443",
             "Protocol" : "HTTPS",
           }
         ],
         "Subnets": [ "subnet-7a744a51", "subnet-9edfd0c7" ],
         "SecurityGroups": [ { "Ref": "ELBSecGroup" } ],
         "AvailabilityZones": [ "us-east-1a, us-east-1c" ],
         "Tags" :[]
        }
    },
        "LoadBalancerNames": [{ "Ref": "ELB" }],
        "Tags": [
          {
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AppName"
                  },
                  "-",
                  {
                    "Ref": "Envname"
                  }
                ]
              ]
            },
            "Key": "Name",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Fn::FindInMap": [
                "MapByEnvname",
                {
                  "Ref": "Envname"
                },
                "EnvTag"
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "OpsInfo",
            "Value": {
              "Fn::FindInMap": [
                "MapByEnvname",
                {
                  "Ref": "Envname"
                },
                "OpsInfoTag"
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Value": {
              "Ref": "Creator"
            },
            "Key": "Creator",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "AppInstanceCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "EC2LaunchConfiguration",
      "Properties": {
        "Timeout": "2400",
        "Handle": {
          "Ref": "AppInstanceHandle"
        }
      }
    },
    "EC2LaunchConfiguration": {
      "Metadata": {
        "AWS::CloudFormation::Authentication": {
          "default": {
            "buckets": [
              {
                "Fn::FindInMap": [
                  "MapByEnvname",
                  {
                    "Ref": "Envname"
                  },
                  "Bucket"
                ]
              }
            ],
            "roleName": {
              "Fn::Join": [
                "",
                [
                  "app_",
                  {
                    "Ref": "AppName"
                  },
                  "_role"
                ]
              ]
            },
            "type": "s3"
          }
        },
        "AWS::CloudFormation::Init": {
          "CFNUpdate": {
            "commands": {
              "app-deploy": {
                "ignoreErrors": false,
                "command": "powershell.exe -File D:\\temp\\init.ps1",
                "waitAfterCompletion": "0"
              }
            }
          },
          "configSets": {
            "Bootstrap": [
              "BuildProps",
              "InitBoot"
            ],
            "NextUpdate": [
              "BuildProps",
              "CFNUpdate"
            ]
          },
          "InitBoot": {
            "packages": {
              "msi": {
                "awscli": "https://s3.amazonaws.com/aws-cli/AWSCLI64.msi"
              }
            },
            "sources": {
              "D:\\temp\\win32_11gR2_client": {
                "Fn::Join": [
                  "",
                  [
                    "https://s3.amazonaws.com/",
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::FindInMap": [
                              "MapByEnvname",
                              {
                                "Ref": "Envname"
                              },
                              "Bucket"
                            ]
                          },
                          "/Generic-CFN-GAP/files/win32_11gR2_client.zip"
                        ]
                      ]
                    }
                  ]
                ]
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "files": {
              "D:\\temp\\joindomain.ps1": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::FindInMap": [
                                "MapByEnvname",
                                {
                                  "Ref": "Envname"
                                },
                                "Bucket"
                              ]
                            },
                            "/Generic-CFN-GAP/scripts/joindomain.ps1"
                          ]
                        ]
                      }
                    ]
                  ]
                }
              },
              "D:\\temp\\init.ps1": {
                "source": {
                  "Fn::Join": [
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::FindInMap": [
                                "MapByEnvname",
                                {
                                  "Ref": "Envname"
                                },
                                "Bucket"
                              ]
                            },
                            "/Generic-CFN-GAP/scripts/init.ps1"
                          ]
                        ]
                      }
                    ]
                  ]
                }
              },
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "interval=5",
                      "\n",
                      "verbose=true"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.add, post.update\n",
                      "path=Resources.EC2LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c NextUpdate  -s ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " -r EC2LaunchConfiguration ",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            },
            "commands": {
              "1-domainjoin": {
                "ignoreErrors": false,
                "command": "powershell.exe -File D:\\temp\\joindomain.ps1",
                "waitAfterCompletion": "forever"
              },
              "3-ora-32-client": {
                "command": "powershell.exe cd d:\\temp\\win32_11gR2_client\\client; .\\setup.exe -silent -debug -force -waitforcompletion -nowait -ignoreSysPrereqs -ignorePrereq oracle.install.client.installType=\"Administrator\" ORACLE_HOME=\"C:\\oracle\\product\\Client32\" ORACLE_HOME_NAME=\"OraClient11g_Home2\" ORACLE_BASE=\"C:\\oracle\" DECLINE_SECURITY_UPDATES=true",
                "waitAfterCompletion": "0",
                "ignoreErrors": false
              },
              "app-deploy": {
                "ignoreErrors": false,
                "command": "powershell.exe -File D:\\temp\\init.ps1",
                "waitAfterCompletion": "0"
              }
            }
          },
          "BuildProps": {
            "files": {
              "D:\\temp\\props.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$AdminListString = \"",
                      {
                        "Ref": "AdminListString"
                      },
                      "\"\n",
                      "$envname = \"",
                      {
                        "Ref": "Envname"
                      },
                      "\"\n",
                      "$domainjoinusername = \"ditech\\",
                      {
                        "Ref": "DomainJoinUsername"
                      },
                      "\"\n",
                      "$domainjoinpassword = \"",
                      {
                        "Ref": "DomainJoinPassword"
                      },
                      "\"\n",
                      "$BuildNumber = \"",
                      {
                        "Ref": "BuildNumber"
                      },
                      "\"\n",
                      "$APPSVCAccountUsername = \"",
                      {
                        "Ref": "APPSVCAccountUsername"
                      },
                      "\"\n",
                      "$APPSVCAccountPassword = \"",
                      {
                        "Ref": "APPSVCAccountPassword"
                      },
                      "\"\n",
                      "$BucketName = \"",
                      {
                        "Fn::FindInMap": [
                          "MapByEnvname",
                          {
                            "Ref": "Envname"
                          },
                          "Bucket"
                        ]
                      },
                      "\"\n",
                      "$appname = \"",
                      {
                        "Ref": "AppName"
                      },

                      "\"\n",
                      "$OUPath = \"OU=",
                      {
                        "Ref": "Envname"
                      },
                      ",",
                      "OU=Windows,OU=Ditech Cloud Computers,DC=ditech,DC=us\"\n",
                      "$appname = \"",
                      {
                        "Ref": "AppName"
                      },
                      "\""
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "AmiId"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "$xml = [xml](get-content \"C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\Config.xml\") \n",
                "$xml.SelectNodes(\"//Plugin\")|Where-Object {$_.Name -match \"AWS.EC2.Windows.CloudWatch.PlugIn\"}|%{$_.State= \"Enabled\"} \n",
                "$xml.Save(\"C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\Config.xml\") \n",
                "SC.EXE stop ec2config \n",
                "sleep 10 \n",
                "SC.EXE start ec2config \n",
                "cfn-init.exe -v -c Bootstrap -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r EC2LaunchConfiguration ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "cfn-signal.exe -e $LASTEXITCODE ",
                {
                  "Fn::Base64": {
                    "Ref": "AppInstanceHandle"
                  }
                },
                "\n",
                "</powershell>"
              ]
            ]
          }
        },
        "SecurityGroups": {
          "Fn::FindInMap": [
            "MapByEnvname",
            {
              "Ref": "Envname"
            },
            "AppSg"
          ]
        },
        "BlockDeviceMappings": [
          {
            "Ebs": {
              "VolumeSize": "20",
              "VolumeType": "gp2",
              "DeleteOnTermination": "true",
              "SnapshotId": {
                "Fn::If": [
                  "EncryptEbs",
                  {
                    "Fn::FindInMap": [
                      "MapByEnvname",
                      {
                        "Ref": "Envname"
                      },
                      "Snap"
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              }
            },
            "DeviceName": "xvdf"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Fn::Join": [
            "",
            [
              "app_",
              {
                "Ref": "AppName"
              },
              "_role"
            ]
          ]
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "AppInstanceHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }
  }
}
